import request from "supertest";
import { createApp } from "@src/app.js";

describe("create customer", () => {
  it("should check user is authorized", async () => {
    const app = await createApp();
    // send request to create customer
    const response = await request(app).post("/v1/customers").send({});
    expect(response.statusCode).toEqual(401);
    expect(response.body.message).toBe("Unauthorized Access");
  });
  it("should check user have permission to access", async () => {
    const app = await createApp();
    // get access token for authorization request
    const authResponse = await request(app).post("/v1/auth/signin").send({
      username: "user",
      password: "user2024",
    });
    const accessToken = authResponse.body.accessToken;
    // send request to create customer
    const response = await request(app).post("/v1/customers").send({}).set("Authorization", `Bearer ${accessToken}`);

    expect(response.statusCode).toEqual(403);
    expect(response.body.message).toBe("Forbidden Access");
  });
  it("should check required fields", async () => {
    const app = await createApp();
    // get access token for authorization request
    const authResponse = await request(app).post("/v1/auth/signin").send({
      username: "admin",
      password: "admin2024",
    });
    // send request to create customer
    const accessToken = authResponse.body.accessToken;

    // do not send all required fields
    const response = await request(app).post("/v1/customers").send({}).set("Authorization", `Bearer ${accessToken}`);
    expect(response.statusCode).toEqual(422);
    expect(response.body.message).toBe("Unprocessable Entity");
    expect(response.body.errors.name).toBe(["name is required"]);
    expect(response.body.errors.chartOfAccount).toBe(["chart of account is required"]);
    expect(response.body.errors.unit).toBe(["unit is required"]);

    // only send 1 required fields
    const response2 = await request(app)
      .post("/v1/customers")
      .send({
        address: "New Address",
      })
      .set("Authorization", `Bearer ${accessToken}`);
    expect(response2.statusCode).toEqual(422);
    expect(response2.body.message).toBe("Unprocessable Entity");
    expect(response2.body.errors.code).toBe(["code is required"]);
    expect(response2.body.errors.name).toBe(["name is required"]);
  });
  it("should check unique fields", async () => {
    const app = await createApp();
    // get access token for authorization request
    const authResponse = await request(app).post("/v1/auth/signin").send({
      username: "admin",
      password: "admin2024",
    });
    const accessToken = authResponse.body.accessToken;
    // send request to create customer
    const data = {
      code: "A1",
      name: "customer A",
      email: "customer-a@example.com",
      address: "Customer Address",
      phone: "+62812345678",
    };
    await request(app).post("/v1/customers").send(data).set("Authorization", `Bearer ${accessToken}`);
    const response = await request(app).post("/v1/customers").send(data).set("Authorization", `Bearer ${accessToken}`);

    expect(response.statusCode).toEqual(422);
    expect(response.body.message).toBe("Unprocessable Entity");
    expect(response.body.errors.code).toBe(["code is exists"]);
  });
  it("should save to database", async () => {
    const app = await createApp();
    // get access token for authorization request
    const authResponse = await request(app).post("/v1/auth/signin").send({
      username: "admin",
      password: "admin2024",
    });
    const accessToken = authResponse.body.accessToken;
    // send request to create customer
    const data = {
      code: "A1",
      name: "customer A",
      email: "customer-a@example.com",
      address: "Customer Address",
      phone: "+62812345678",
    };
    const response = await request(app).post("/v1/customers").send(data).set("Authorization", `Bearer ${accessToken}`);
    // expected response status
    expect(response.statusCode).toEqual(201);
    // expected response body
    expect(response.body._id).not.toBeNull();
    // expected database data by user input
    const customerService = new CustomerService(db);
    const result = customerService.read(response.body._id);
    expect(result._id).toEqual(data._id);
    expect(result.code).toEqual(data.code);
    expect(result.name).toEqual(data.name);
    expect(result.email).toEqual(data.email);
    expect(result.address).toEqual(data.address);
    expect(result.phone).toEqual(data.phone);
    // expected database data generated by system
    expect(result.createdAt instanceof Date).toBeTruthy();
    expect(result.createdBy_id).toBe(authResponse.body._id);
  });
});
